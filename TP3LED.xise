----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    09:51:41 05/07/2021 
-- Design Name: 
-- Module Name:    ledblink - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ledblink is
    Port ( clk : in  STD_LOGIC;
				rst : in  STD_LOGIC;
				 sens: in  STD_LOGIC;
				output : out std_logic_vector(6 downto 0);
				anode : out std_logic_vector(3 downto 0);
           sout  : out  std_logic_vector(3 downto 0));
end ledblink;

architecture Behavioral of ledblink is
signal s_out : std_logic_vector(3 downto 0):= "0000";
signal cnt : integer:= 0;
signal clk_1hz : std_logic:= '0' ;

begin
process(clk)
begin
if clk'event and clk = '1' then
	 clk_1hz <= '0';
    cnt <= cnt+1;
    if cnt > 50000000 then
        cnt <= 0;
        clk_1hz <= '1';
    end if;
end if;
end process;

process(clk_1hz,rst,sens)
begin 
if rst ='1' then
	s_out <= "0000";
elsif clk_1hz'event and clk_1hz = '1' then
      if sens = '0' then
		  if s_out > "1010" then
				s_out <= "0000";
		  else
            s_out <= s_out +"0001";
				Case s_out is 
					  when "0000" => output <="0000001";
					  when "0001" =>output <="1001111";
					  when "0010" =>output <="0010010";
					  when "0011" =>output <="0000110";
					  when "0100" =>output <="1001100";
					  when "0101" =>output <="0100100";
					  when "0110" =>output <="0100000";
					  when "0111" =>output <="0001111";
					  when "1000" =>output <="0000000";
					  when "1001" =>output <="0001100";
					  when "1010" =>output <="0001000";
					  when "1011" =>output <="1100000";
					  when "1100" =>output <="0110001";
					  when "1101" =>output <="1000010";
					  when "1110" =>output <="0110000";
					  when "1111" =>output <="0111000";
					  when others =>null;
				 end case ;
  
			end if;
      else
        if s_out <= "0000" then
            s_out <= "1010";
        else 
            s_out <= s_out -"0001";
				Case s_out is 
					  when "0000" => output <="0000001";
					  when "0001" =>output <="1001111";
					  when "0010" =>output <="0010010";
					  when "0011" =>output <="0000110";
					  when "0100" =>output <="1001100";
					  when "0101" =>output <="0100100";
					  when "0110" =>output <="0100000";
					  when "0111" =>output <="0001111";
					  when "1000" =>output <="0000000";
					  when "1001" =>output <="0001100";
					  when "1010" =>output <="0001000";
					  when "1011" =>output <="1100000";
					  when "1100" =>output <="0110001";
					  when "1101" =>output <="1000010";
					  when "1110" =>output <="0110000";
					  when "1111" =>output <="0111000";
					  when others =>null;
				 end case ;
        end if;
    end if;
	 end if;

end process ;
anode <= "1110";
sout <= s_out;
end Behavioral;
